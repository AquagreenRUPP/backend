{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\n\n// Set the base URL for API requests\nconst API_URL = 'http://localhost:8000/api';\nexport default createStore({\n  state: {\n    files: [],\n    currentFile: null,\n    processedData: null,\n    loading: false,\n    error: null\n  },\n  getters: {\n    getFiles: state => state.files,\n    getCurrentFile: state => state.currentFile,\n    getProcessedData: state => state.processedData,\n    isLoading: state => state.loading,\n    getError: state => state.error\n  },\n  mutations: {\n    SET_FILES(state, files) {\n      state.files = files;\n    },\n    SET_CURRENT_FILE(state, file) {\n      state.currentFile = file;\n    },\n    SET_PROCESSED_DATA(state, data) {\n      state.processedData = data;\n    },\n    SET_LOADING(state, loading) {\n      state.loading = loading;\n    },\n    SET_ERROR(state, error) {\n      state.error = error;\n    },\n    CLEAR_ERROR(state) {\n      state.error = null;\n    }\n  },\n  actions: {\n    // Fetch all uploaded files\n    async fetchFiles({\n      commit\n    }) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        const response = await axios.get(`${API_URL}/excel-files/`);\n        commit('SET_FILES', response.data);\n        return response.data;\n      } catch (error) {\n        commit('SET_ERROR', error.response?.data || 'Failed to fetch files');\n        console.error('Error fetching files:', error);\n        return [];\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // Fetch a specific file by ID\n    async fetchFile({\n      commit\n    }, fileId) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        const response = await axios.get(`${API_URL}/excel-files/${fileId}/`);\n        commit('SET_CURRENT_FILE', response.data);\n        return response.data;\n      } catch (error) {\n        commit('SET_ERROR', error.response?.data || 'Failed to fetch file');\n        console.error('Error fetching file:', error);\n        return null;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // Upload a new Excel file\n    async uploadFile({\n      commit\n    }, {\n      title,\n      file\n    }) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        const formData = new FormData();\n        formData.append('title', title);\n        formData.append('file', file);\n        const response = await axios.post(`${API_URL}/excel-files/`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        return response.data;\n      } catch (error) {\n        commit('SET_ERROR', error.response?.data || 'Failed to upload file');\n        console.error('Error uploading file:', error);\n        return null;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // Process an already uploaded file\n    async processFile({\n      commit\n    }, fileId) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        const response = await axios.post(`${API_URL}/excel-files/${fileId}/process/`);\n        return response.data;\n      } catch (error) {\n        commit('SET_ERROR', error.response?.data || 'Failed to process file');\n        console.error('Error processing file:', error);\n        return null;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    },\n    // Fetch processed data for a specific file\n    async fetchProcessedData({\n      commit\n    }, fileId) {\n      commit('SET_LOADING', true);\n      commit('CLEAR_ERROR');\n      try {\n        const response = await axios.get(`${API_URL}/processed-data/by_file/?file_id=${fileId}`);\n        commit('SET_PROCESSED_DATA', response.data);\n        return response.data;\n      } catch (error) {\n        commit('SET_ERROR', error.response?.data || 'Failed to fetch processed data');\n        console.error('Error fetching processed data:', error);\n        return null;\n      } finally {\n        commit('SET_LOADING', false);\n      }\n    }\n  }\n});","map":{"version":3,"names":["createStore","axios","API_URL","state","files","currentFile","processedData","loading","error","getters","getFiles","getCurrentFile","getProcessedData","isLoading","getError","mutations","SET_FILES","SET_CURRENT_FILE","file","SET_PROCESSED_DATA","data","SET_LOADING","SET_ERROR","CLEAR_ERROR","actions","fetchFiles","commit","response","get","console","fetchFile","fileId","uploadFile","title","formData","FormData","append","post","headers","processFile","fetchProcessedData"],"sources":["D:/DSE_Folder/Year_3/Sem_2/Web_Agri_DJango/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport axios from 'axios'\n\n// Set the base URL for API requests\nconst API_URL = 'http://localhost:8000/api'\n\nexport default createStore({\n  state: {\n    files: [],\n    currentFile: null,\n    processedData: null,\n    loading: false,\n    error: null\n  },\n  getters: {\n    getFiles: state => state.files,\n    getCurrentFile: state => state.currentFile,\n    getProcessedData: state => state.processedData,\n    isLoading: state => state.loading,\n    getError: state => state.error\n  },\n  mutations: {\n    SET_FILES(state, files) {\n      state.files = files\n    },\n    SET_CURRENT_FILE(state, file) {\n      state.currentFile = file\n    },\n    SET_PROCESSED_DATA(state, data) {\n      state.processedData = data\n    },\n    SET_LOADING(state, loading) {\n      state.loading = loading\n    },\n    SET_ERROR(state, error) {\n      state.error = error\n    },\n    CLEAR_ERROR(state) {\n      state.error = null\n    }\n  },\n  actions: {\n    // Fetch all uploaded files\n    async fetchFiles({ commit }) {\n      commit('SET_LOADING', true)\n      commit('CLEAR_ERROR')\n      \n      try {\n        const response = await axios.get(`${API_URL}/excel-files/`)\n        commit('SET_FILES', response.data)\n        return response.data\n      } catch (error) {\n        commit('SET_ERROR', error.response?.data || 'Failed to fetch files')\n        console.error('Error fetching files:', error)\n        return []\n      } finally {\n        commit('SET_LOADING', false)\n      }\n    },\n    \n    // Fetch a specific file by ID\n    async fetchFile({ commit }, fileId) {\n      commit('SET_LOADING', true)\n      commit('CLEAR_ERROR')\n      \n      try {\n        const response = await axios.get(`${API_URL}/excel-files/${fileId}/`)\n        commit('SET_CURRENT_FILE', response.data)\n        return response.data\n      } catch (error) {\n        commit('SET_ERROR', error.response?.data || 'Failed to fetch file')\n        console.error('Error fetching file:', error)\n        return null\n      } finally {\n        commit('SET_LOADING', false)\n      }\n    },\n    \n    // Upload a new Excel file\n    async uploadFile({ commit }, { title, file }) {\n      commit('SET_LOADING', true)\n      commit('CLEAR_ERROR')\n      \n      try {\n        const formData = new FormData()\n        formData.append('title', title)\n        formData.append('file', file)\n        \n        const response = await axios.post(`${API_URL}/excel-files/`, formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        })\n        \n        return response.data\n      } catch (error) {\n        commit('SET_ERROR', error.response?.data || 'Failed to upload file')\n        console.error('Error uploading file:', error)\n        return null\n      } finally {\n        commit('SET_LOADING', false)\n      }\n    },\n    \n    // Process an already uploaded file\n    async processFile({ commit }, fileId) {\n      commit('SET_LOADING', true)\n      commit('CLEAR_ERROR')\n      \n      try {\n        const response = await axios.post(`${API_URL}/excel-files/${fileId}/process/`)\n        return response.data\n      } catch (error) {\n        commit('SET_ERROR', error.response?.data || 'Failed to process file')\n        console.error('Error processing file:', error)\n        return null\n      } finally {\n        commit('SET_LOADING', false)\n      }\n    },\n    \n    // Fetch processed data for a specific file\n    async fetchProcessedData({ commit }, fileId) {\n      commit('SET_LOADING', true)\n      commit('CLEAR_ERROR')\n      \n      try {\n        const response = await axios.get(`${API_URL}/processed-data/by_file/?file_id=${fileId}`)\n        commit('SET_PROCESSED_DATA', response.data)\n        return response.data\n      } catch (error) {\n        commit('SET_ERROR', error.response?.data || 'Failed to fetch processed data')\n        console.error('Error fetching processed data:', error)\n        return null\n      } finally {\n        commit('SET_LOADING', false)\n      }\n    }\n  }\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}