{"ast":null,"code":"import { mapGetters } from 'vuex';\nexport default {\n  name: 'FileDetailView',\n  props: {\n    id: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  data() {\n    return {\n      processingFile: false\n    };\n  },\n  computed: {\n    ...mapGetters(['getCurrentFile', 'getProcessedData', 'isLoading', 'getError']),\n    currentFile() {\n      return this.getCurrentFile;\n    },\n    processedData() {\n      if (!this.getProcessedData || this.getProcessedData.length === 0) {\n        return null;\n      }\n      return this.getProcessedData[0]?.data_json || null;\n    },\n    loading() {\n      return this.isLoading;\n    },\n    error() {\n      return this.getError;\n    }\n  },\n  mounted() {\n    this.fetchFileData();\n  },\n  methods: {\n    async fetchFileData() {\n      await this.$store.dispatch('fetchFile', this.id);\n      if (this.currentFile && this.currentFile.processed) {\n        await this.$store.dispatch('fetchProcessedData', this.id);\n      }\n    },\n    async refreshData() {\n      await this.fetchFileData();\n    },\n    async processFile(fileId) {\n      this.processingFile = true;\n      try {\n        await this.$store.dispatch('processFile', fileId);\n        // Refresh the file data to update the status\n        await this.fetchFileData();\n      } catch (error) {\n        console.error('Error processing file:', error);\n      } finally {\n        this.processingFile = false;\n      }\n    },\n    formatDate(dateString) {\n      if (!dateString) return '';\n      const date = new Date(dateString);\n      return new Intl.DateTimeFormat('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      }).format(date);\n    },\n    formatColumnName(key) {\n      // Convert snake_case or camelCase to Title Case\n      return key.replace(/_/g, ' ').replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).trim();\n    },\n    exportCSV() {\n      if (!this.processedData) return;\n\n      // Convert JSON to CSV\n      const headers = Object.keys(this.processedData[0]);\n      const csvRows = [headers.join(','),\n      // Header row\n      ...this.processedData.map(row => headers.map(header =>\n      // Handle values with commas by wrapping in quotes\n      typeof row[header] === 'string' && row[header].includes(',') ? `\"${row[header]}\"` : row[header]).join(','))];\n      const csvContent = csvRows.join('\\n');\n\n      // Create a blob and download link\n      const blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n      });\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.setAttribute('href', url);\n      link.setAttribute('download', `${this.currentFile.title}_data.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  }\n};","map":{"version":3,"names":["mapGetters","name","props","id","type","String","Number","required","data","processingFile","computed","currentFile","getCurrentFile","processedData","getProcessedData","length","data_json","loading","isLoading","error","getError","mounted","fetchFileData","methods","$store","dispatch","processed","refreshData","processFile","fileId","console","formatDate","dateString","date","Date","Intl","DateTimeFormat","year","month","day","hour","minute","format","formatColumnName","key","replace","str","toUpperCase","trim","exportCSV","headers","Object","keys","csvRows","join","map","row","header","includes","csvContent","blob","Blob","url","URL","createObjectURL","link","document","createElement","setAttribute","title","style","visibility","body","appendChild","click","removeChild"],"sources":["D:\\DSE_Folder\\Year_3\\Sem_2\\Web_Agri_DJango\\frontend\\src\\views\\FileDetailView.vue"],"sourcesContent":["<template>\n  <div class=\"file-detail\">\n    <div v-if=\"loading\" class=\"text-center my-5\">\n      <div class=\"spinner-border text-primary\" role=\"status\">\n        <span class=\"visually-hidden\">Loading...</span>\n      </div>\n      <p class=\"mt-2\">Loading data...</p>\n    </div>\n\n    <div v-else-if=\"error\" class=\"alert alert-danger\">\n      {{ error }}\n    </div>\n\n    <div v-else-if=\"!currentFile\" class=\"alert alert-warning\">\n      File not found. <router-link to=\"/files\">Return to files list</router-link>.\n    </div>\n\n    <div v-else>\n      <div class=\"d-flex justify-content-between align-items-center mb-4\">\n        <h1>{{ currentFile.title }}</h1>\n        <router-link to=\"/files\" class=\"btn btn-outline-secondary\">\n          Back to Files\n        </router-link>\n      </div>\n\n      <div class=\"card mb-4\">\n        <div class=\"card-header bg-light\">\n          <h5 class=\"card-title mb-0\">File Information</h5>\n        </div>\n        <div class=\"card-body\">\n          <div class=\"row\">\n            <div class=\"col-md-6\">\n              <p><strong>Upload Date:</strong> {{ formatDate(currentFile.uploaded_at) }}</p>\n              <p><strong>Status:</strong> \n                <span \n                  :class=\"currentFile.processed ? 'badge bg-success' : 'badge bg-warning text-dark'\"\n                >\n                  {{ currentFile.processed ? 'Processed' : 'Pending' }}\n                </span>\n              </p>\n            </div>\n            <div class=\"col-md-6\">\n              <p><strong>File ID:</strong> {{ currentFile.id }}</p>\n              <p v-if=\"!currentFile.processed\">\n                <button \n                  class=\"btn btn-sm btn-primary\"\n                  @click=\"processFile(currentFile.id)\"\n                  :disabled=\"processingFile\"\n                >\n                  <span v-if=\"processingFile\" class=\"spinner-border spinner-border-sm me-1\" role=\"status\" aria-hidden=\"true\"></span>\n                  Process File\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"card\">\n        <div class=\"card-header bg-light d-flex justify-content-between align-items-center\">\n          <h5 class=\"card-title mb-0\">Processed Data</h5>\n          <div class=\"btn-group\" role=\"group\">\n            <button class=\"btn btn-sm btn-outline-primary\" @click=\"refreshData\">\n              <i class=\"bi bi-arrow-clockwise me-1\"></i> Refresh\n            </button>\n            <button class=\"btn btn-sm btn-outline-success\" @click=\"exportCSV\">\n              <i class=\"bi bi-download me-1\"></i> Export CSV\n            </button>\n          </div>\n        </div>\n        <div class=\"card-body\">\n          <div v-if=\"!currentFile.processed && !processedData\" class=\"alert alert-warning\">\n            This file has not been processed yet. Click \"Process File\" to extract the data.\n          </div>\n          \n          <div v-else-if=\"!processedData || processedData.length === 0\" class=\"alert alert-info\">\n            No processed data available for this file.\n          </div>\n          \n          <div v-else>\n            <!-- Data Table -->\n            <div class=\"table-responsive\">\n              <table class=\"table table-striped table-hover\">\n                <thead>\n                  <tr>\n                    <th v-for=\"(_, key) in processedData[0]\" :key=\"key\">{{ formatColumnName(key) }}</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr v-for=\"(row, index) in processedData\" :key=\"index\">\n                    <td v-for=\"(value, key) in row\" :key=\"key\">{{ value }}</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n            \n            <!-- Power BI Iframe Preview Placeholder -->\n            <div class=\"mt-4\">\n              <h5>Data Visualization</h5>\n              <div class=\"alert alert-info\">\n                Power BI integration will be available in a future update.\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'FileDetailView',\n  props: {\n    id: {\n      type: [String, Number],\n      required: true\n    }\n  },\n  data() {\n    return {\n      processingFile: false\n    }\n  },\n  computed: {\n    ...mapGetters(['getCurrentFile', 'getProcessedData', 'isLoading', 'getError']),\n    currentFile() {\n      return this.getCurrentFile\n    },\n    processedData() {\n      if (!this.getProcessedData || this.getProcessedData.length === 0) {\n        return null\n      }\n      return this.getProcessedData[0]?.data_json || null\n    },\n    loading() {\n      return this.isLoading\n    },\n    error() {\n      return this.getError\n    }\n  },\n  mounted() {\n    this.fetchFileData()\n  },\n  methods: {\n    async fetchFileData() {\n      await this.$store.dispatch('fetchFile', this.id)\n      if (this.currentFile && this.currentFile.processed) {\n        await this.$store.dispatch('fetchProcessedData', this.id)\n      }\n    },\n    async refreshData() {\n      await this.fetchFileData()\n    },\n    async processFile(fileId) {\n      this.processingFile = true\n      try {\n        await this.$store.dispatch('processFile', fileId)\n        // Refresh the file data to update the status\n        await this.fetchFileData()\n      } catch (error) {\n        console.error('Error processing file:', error)\n      } finally {\n        this.processingFile = false\n      }\n    },\n    formatDate(dateString) {\n      if (!dateString) return ''\n      const date = new Date(dateString)\n      return new Intl.DateTimeFormat('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      }).format(date)\n    },\n    formatColumnName(key) {\n      // Convert snake_case or camelCase to Title Case\n      return key\n        .replace(/_/g, ' ')\n        .replace(/([A-Z])/g, ' $1')\n        .replace(/^./, str => str.toUpperCase())\n        .trim()\n    },\n    exportCSV() {\n      if (!this.processedData) return\n      \n      // Convert JSON to CSV\n      const headers = Object.keys(this.processedData[0])\n      const csvRows = [\n        headers.join(','), // Header row\n        ...this.processedData.map(row => \n          headers.map(header => \n            // Handle values with commas by wrapping in quotes\n            typeof row[header] === 'string' && row[header].includes(',') \n              ? `\"${row[header]}\"` \n              : row[header]\n          ).join(',')\n        )\n      ]\n      \n      const csvContent = csvRows.join('\\n')\n      \n      // Create a blob and download link\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' })\n      const url = URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      link.setAttribute('href', url)\n      link.setAttribute('download', `${this.currentFile.title}_data.csv`)\n      link.style.visibility = 'hidden'\n      document.body.appendChild(link)\n      link.click()\n      document.body.removeChild(link)\n    }\n  }\n}\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}